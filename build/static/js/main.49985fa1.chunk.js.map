{"version":3,"sources":["serviceWorker.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","_ref","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","card","name","email","id","alt","src","concat","CardList","robots","map","user","i","Card","key","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","Components_CardList","Component","ReactDOM","render","Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCNSC,EAXC,SAAAC,GAA+BA,EAA7BC,YAA6B,IAAjBC,EAAiBF,EAAjBE,aAC1B,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVC,KAAK,SACLC,YAAY,eACZC,SAAUP,MCQPQ,SAbH,SAAAV,GAAmB,IAAjBW,EAAiBX,EAAjBW,KAAKC,EAAYZ,EAAZY,MAAMC,EAAMb,EAANa,GAErB,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKS,IAAI,SAASC,IAAG,wBAAAC,OAA0BH,EAA1B,cACrBV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKM,GACLR,EAAAC,EAAAC,cAAA,SAAIO,OCaLK,EApBA,SAAAjB,GACf,IADiBkB,EACjBlB,EADiBkB,OAGb,OACIf,EAAAC,EAAAC,cAAA,WAEQa,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACAlB,EAAAC,EAAAC,cAACiB,EAAD,CACAC,IAAKF,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,YCLlBY,SARD,SAACC,GACX,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAO,UAChEJ,EAAMK,YCqDJC,cAjDX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBRI,eAAiB,SAACC,GAEdR,EAAKS,SAAS,CAACxC,YAAYuC,EAAME,OAAOC,SAjBpCX,EAAKY,MAAM,CACP1B,OAAO,GACPjB,YAAY,IALP+B,mFAQM,IAAAa,EAAAV,KACfW,MAAM,8CACLC,KAAK,SAAAC,GACF,OAAOA,EAASC,SAEnBF,KAAK,SAAAG,GACFL,EAAKJ,SAAS,CAACvB,OAAOgC,uCAWtB,IAAAC,EAAAhB,KACEiB,EAAiBjB,KAAKS,MAAM1B,OAAOmC,OAAO,SAAAnC,GAC5C,OAAOA,EAAOP,KAAK2C,cAAcC,SAASJ,EAAKP,MAAM3C,YAAYqD,iBAErE,OAA8B,IAA3BnB,KAAKS,MAAM1B,OAAOsC,OAEVrD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,WAKHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWvD,aAAciC,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUzC,OAAQkC,aA1CxBQ,aCElBC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SNwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.49985fa1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nconst SearchBox=({searchfield,searchChange} )=>{\r\n    return(\r\n        <div>\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type='search' \r\n            placeholder='Search robot' \r\n            onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst card= ({name,email,id})=>{\r\n    //const {name,email,id}= props;\r\n    return(\r\n        <div className='tc grow bg-light-green br3 pa2 ma2 dib bw2 shadow-5'>\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>\r\n{\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i)=>{\r\n                return(\r\n                <Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} />);\r\n            \r\n            })\r\n        }\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll= (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll' , border: '5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>   \r\n    );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nimport SearchBox from '../Components/SearchBox';\r\nimport CardList from '../Components/CardList';\r\nimport '../App.css';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component{\r\n     \r\n    constructor(){   \r\n        super()\r\n    \r\n        this.state={\r\n            robots:[],\r\n            searchfield:'',\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n            return response.json(); \r\n        })\r\n        .then(users =>{\r\n            this.setState({robots:users});\r\n        })\r\n        \r\n    }\r\nonSearchChange = (event) => {\r\n    //console.log(this.state.searchfield);\r\n    this.setState({searchfield:event.target.value})\r\n   \r\n\r\n}\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase() );\r\n        })\r\n        if(this.state.robots.length===0)\r\n        {\r\n            return <h1 className=\"tc\">Loading</h1>\r\n        }\r\n        else\r\n        {\r\n            return(\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robofriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n//import 'tachyons';  \n\nimport App from './Containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}